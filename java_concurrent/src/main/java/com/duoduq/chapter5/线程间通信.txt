线程间通信：
    同步阻塞与异步非阻塞：
        同步阻塞消息处理：
            存在几个显著的缺陷：
            1.同步Event提交，客户端等待的时间过长(提交Event时长+接收Event创建thread时长+业务处理时长+返回结果时长)
            会陷入阻塞，导致二次提交Event耗时过长。
            2.由于客户端提交的Event数量不多，导致系统同时受理业务数量有限，也就是系统整体的吞吐量不高。
            3.这种一个线程处理一个Event的方式，会导致出现频繁的创建开启与销毁，从而增加系统额外开销。
            4.在业务达到峰值的时候，大量的业务处理线程阻塞会导致频繁的CPU上下文切换，从而降低系统性能。
        异步非阻塞消息处理：
    初识wait和notify:
        wait和notify方法详解
            wait和notify方法并不是Thread特有的方法，而是Object中的方法，也就是说在JDK中的每一个类都拥有这两个方法，
        下面是wait方法的三个重载方法：
            public final void wait() throws InterruptedException
            public final native void wait(long timeout) throws InterruptedException;
            public final void wait(long timeout, int nanos) throws InterruptedException
            1.wait方法的这三个重载方法都将调用wait(long timeout)这个方法，前文使用的wait()方法等价于wait(0),0代表
            着永不超时。
            2.Object的wait(long timeout)方法会导致当前线程进入阻塞，知道有其他线程调用了Object的notify或者notifyAll
            方法才能将其唤醒，或者阻塞时间到达了timeout时间而自动唤醒。
            3.wait方法必须拥有该对象的monitor，也就是wait方法必须在同步方法中使用
            4.当前线程执行了该对象的wait方法之后，将会放弃对该monitor的所有权并且进入与该对象关联的wait set中，就是说
            一旦线程执行了某个object的wait方法之后，它就会释放对该对象monitor的所有权，其他线程也会有机会继续争抢该
            monitor的所有权。
         notify方法的作用：
            public final native void notify();
            1.唤醒单个正在执行该对象wait方法的线程
            2.如果有某个线程由于执行该对象的wait方法而进入阻塞则会被唤醒，如果没有则会忽略
            3.被唤醒的线程需要重新获取对该对象所关联monitor的lock才能继续执行
    关于wait和notify的注意事项：
        1.wait方法是可中断方法，这也就意味着，当前线程一旦调用了wait方法进入阻塞状态，其他线程是可以使用Interrupt方法将其
        打断的；可中断方法被打断后会收到中断异常InterruptedException,同时Interrupt标识也会被擦除。
        2.线程执行了某个对象的wait方法以后，会加入与之对应的wait set中，每一个对象的monitor都有一个与之关联的wait set.
        3.当线程进入wait set之后，notify方法可以将其唤醒，也就是从wait set中弹出，同时中断wait中的线程也会将其唤醒。
        4.必须在同步方法中使用wait和notify方法，运行下面任何一个地方都会抛出非法的monitor状态异常IllegalMonitorStateException.
        5.同步代码的monitor必须与执行wait notify方法的对象一致，简单地说就是用哪个对象的monitor进行同步，就只能用哪个对
        象的monitor进行同步，就只能用哪个对象进行wait和notify操作
    wait和sleep
        从表面上看，wait和sleep方法都可以使当前线程进入阻塞状态，但是两者之间存在着本质的区别：
        1.wait和sleep方法都可以使线程进入阻塞状态。
        2.wait和sleep方法均是可中断方法，被打断后都会收到中断异常。
        3.wait是Object的方法，而sleep是Thread特有的方法。
        4.wait方法的执行必须在同步方法中进行，而sleep则不需要。
        5.线程在同步方法中执行sleep方法时，并不会释放monitor的锁，而wait方法则会释放monitor的锁。
        6.sleep方法短暂休眠之后会主动退出阻塞，而wait方法(没有指定wait时间)则需要被其他线程中断后才能退出阻塞
    自定义显示锁BooleanLock
        synchronized关键字的缺陷
            synchronized关键字提供了一种排他式的数据同步机制，某个线程在获取monitor lock的时候可能会被阻塞，而这种阻塞有
        两个明显的缺陷：第一，无法控制阻塞时长。第二，阻塞不可能中断

