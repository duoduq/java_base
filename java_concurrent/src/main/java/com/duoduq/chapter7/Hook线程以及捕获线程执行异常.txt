Hook线程以及捕获线程执行异常
    获取线程运行时异常：在Thread类中，关于处理运行时异常的API总共有四个，如下所示：
    1.public void setUncaughtExceptionHandler(UncaughtExceptionHandler eh):为某个特定线程指定UncaughtExceptionHandler.
    2.public static void setDefaultUncaughtExceptionHandler(UncaughtExceptionHandler eh):设置全局的UncaughtExceptionHandler.
    3.public UncaughtExceptionHandler getUncaughtExceptionHandler():获取特定线程的UncaughtExceptionHandler.
    4.public static UncaughtExceptionHandler getDefaultUncaughtExceptionHandler():获取全局的UncaughtExceptionHandler.
    UncaughtExceptionHandler的介绍：
        线程在执行单元中不允许抛出checked异常的，而且线程运行在自己的上下文中，派生它的线程将无法直接获得它运行中出现的异常信息。对此，Java
    为我们提供了一个UncaughtExceptionHandler接口，当线程在运行过程中出现异常时，会回调UNcaughtExceptionHandler接口，从而得知是哪个线程
    在运行时出错，以及出现了什么样的错误。
            @FunctionalInterface
            public interface UncaughtExceptionHandler {
                /**
                 * Method invoked when the given thread terminates due to the
                 * given uncaught exception.
                 * <p>Any exception thrown by this method will be ignored by the
                 * Java Virtual Machine.
                 * @param t the thread
                 * @param e the exception
                 */
                void uncaughtException(Thread t, Throwable e);
            }
        在上述代码中，UncaughtExceptionHandler是一个FunctionalInterface,只有一个抽象方法，该回调接口会被Thread中的dispatchUncaughtException
    方法调用，如下所示：
              /**
                * Dispatch an uncaught exception to the handler. This method is
                * intended to be called only by the JVM.
                */
               private void dispatchUncaughtException(Throwable e) {
                   getUncaughtExceptionHandler().uncaughtException(this, e);
               }
        当线程在运行过程中出现异常时，JVM会调用dispatchUncaughtException方法，该方法会将对应的线程实例以及异常信息传递给回调接口。
    UncaughtExceptionHandler源码分析
        在没有向线程注入UncaughtExceptionHandler回调接口的情况下，线程若出现了异常又将如何处理呢？通过对Thread的源码进行剖析来追踪一下，实例代码如下：
            public UncaughtExceptionHandler getUncaughtExceptionHandler() {
                return uncaughtExceptionHandler != null ?
                    uncaughtExceptionHandler : group;
            }
            getUncaughtExceptionHandler方法首先会判断当前线程是否设置了handler,如果有则执行线程自己的UncaughtException方法，否则就到所在的ThreadGroup
        中获取，Thread-Group同样也实现了UncaughtExceptionHandler接口，下面在来看看ThreadGroup的UncaughtException方法。
            public void uncaughtException(Thread t, Throwable e) {
                if (parent != null) {
                    parent.uncaughtException(t, e);
                } else {
                    Thread.UncaughtExceptionHandler ueh =
                        Thread.getDefaultUncaughtExceptionHandler();
                    if (ueh != null) {
                        ueh.uncaughtException(t, e);
                    } else if (!(e instanceof ThreadDeath)) {
                        System.err.print("Exception in thread \""
                                         + t.getName() + "\" ");
                        e.printStackTrace(System.err);
                    }
                }
            }
         1.该ThreadGroup如果有父ThreadGroup，则直接调用父Group的uncaughtException方法。
         2.如果设置了全局默认的UncaughtExceptionHandler,则调用uncaughtException方法。
         3.若既没有父ThreadGroup，也没有设置全局默认的UncaughtExceptionHandler,则会直接将异常的堆栈信息定向到System.err中。
    注入钩子线程
        Hook线程介绍：
            JVM进程的退出是由于JVM进程中没有活跃的非守护线程，或者收到了系统中断信号，向JVM程序注入一个Hook线程，在JVM进程退出
        的时候，Hook线程会启动执行，通过Runtime可以为JVM注入多个Hook线程。
        Hook线程实战：
            在开发中经常会遇到Hook线程，比如为了防止某个线程被重复启动，在进程启动时会创建一个lock文件，进程收到中断信号的时候会
        删除这个lock文件，我们在MySQL服务器、zookeeper、kafka等系统中都能看到lock文件的存在。
        Hook线程应用场景以及注意事项：
            1.Hook线程只有在收到退出信号的时候会被执行，如果在kill的时候使用了参数-9，那么Hook线程不会得到执行，进程将会立即退
        出，因此.lock文件将得不到清理。
            2.Hook线程中也可以执行一些资源释放的工作，比如关闭文件句柄、socket链接、数据库connection等。
            3.尽量不要在Hook线程中执行一些耗时非常长的操作，因为其会导致程序迟迟不能退出。