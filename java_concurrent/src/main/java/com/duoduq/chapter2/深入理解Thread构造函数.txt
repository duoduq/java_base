Thread的构造方法：
    Constructor and Description
    Thread()
    分配一个新的 Thread对象。
    Thread(Runnable target)
    分配一个新的 Thread对象。
    Thread(Runnable target, String name)
    分配一个新的 Thread对象。
    Thread(String name)
    分配一个新的 Thread对象。
    Thread(ThreadGroup group, Runnable target)
    分配一个新的 Thread对象。
    Thread(ThreadGroup group, Runnable target, String name)
    分配一个新的 Thread对象，使其具有 target作为其运行对象，具有指定的 name作为其名称，属于 group引用的线程组。
    Thread(ThreadGroup group, Runnable target, String name, long stackSize)
    分配一个新的 Thread对象，以便它具有 target作为其运行对象，将指定的 name正如其名，以及属于该线程组由称作 group ，并具有指定的 堆栈大小 。
    Thread(ThreadGroup group, String name)
    分配一个新的 Thread对象。
线程的命名：
      在构造线程的时候可以为线程起一个有特殊意义的名字，这也是比较好的一种做法，尤其在一个线程比较多的程序中，为线程赋予一个包含特殊意义的名字有助
    于问题的排查和线程的跟踪，因此建议在构造线程的时候赋予它一个名字。
线程的默认命名：
    下面的几个构造函数中，并没有提供为线程命名的参数，那么此时线程会有一个怎样的命名呢？
        Thread()
        分配一个新的 Thread对象。
        Thread(Runnable target)
        分配一个新的 Thread对象。
        Thread(ThreadGroup group, Runnable target)
        分配一个新的 Thread对象。
     打开jdk的源码会看到下面的代码：
        public Thread(Runnable target) {
                init(null, target, "Thread-" + nextThreadNum(), 0);
        }
        /* For autonumbering anonymous threads. */
        private static int threadInitNumber;
        private static synchronized int nextThreadNum() {
            return threadInitNumber++;
        }
     如果没有为线程显示地指定一个名字，那么线程将会以"Thread-"作为前缀于一个自增数字进行组合，这个自增数字在整个jvm进程中将会不断自增。
命名线程：
    为线程赋予一个特殊的名字是一种比较好的实战方式，Thread同样也提供了这样的构造函数。
       Thread(String name)
       分配一个新的 Thread对象。
       Thread(ThreadGroup group, Runnable target, String name)
       分配一个新的 Thread对象，使其具有 target作为其运行对象，具有指定的 name作为其名称，属于 group引用的线程组。
       Thread(ThreadGroup group, Runnable target, String name, long stackSize)
       分配一个新的 Thread对象，以便它具有 target作为其运行对象，将指定的 name正如其名，以及属于该线程组由称作 group ，并具有指定的 堆栈大小 。
       Thread(ThreadGroup group, String name)
       分配一个新的 Thread对象。
修改线程的名字：
    不论你使用的是默认的函数命名规则，还是指定了一个特殊的名字，在线程启动之前还有一个机会可以对其进行修改，一旦线程启动，名字将不再被修改，下面是
    Thread的set源码：
        public final synchronized void setName(String name) {
              checkAccess();
              if (name == null) {
                 throw new NullPointerException("name cannot be null");
              }

              this.name = name;
              if (threadStatus != 0) {//线程不是new状态，对其的修改将不会生效
                  setNativeName(name);
              }
        }
线程的父子关系：
    Thread的所有构造函数，最终都会去调用一个非静态方法init,我们截取片段代码对其进行分析，不难发现新创建的任何一个线程都会有一个父线程。
    private void init(ThreadGroup g, Runnable target, String name,long stackSize, AccessControlContext acc, boolean inheritThreadLocals) {
        if (name == null) {
            throw new NullPointerException("name cannot be null");
        }

        this.name = name;

        Thread parent = currentThread();//获取当前线程作为父线程
        SecurityManager security = System.getSecurityManager();
        if (g == null) {
            /* Determine if it's an applet or not */

            /* If there is a security manager, ask the security manager
               what to do. */
            if (security != null) {
                g = security.getThreadGroup();
            }

            /* If the security doesn't have a strong opinion of the matter
               use the parent thread group. */
            if (g == null) {
                g = parent.getThreadGroup();
            }
        }

        /* checkAccess regardless of whether or not threadgroup is
           explicitly passed in. */
        g.checkAccess();

        /*
         * Do we have the required permissions?
         */
        if (security != null) {
            if (isCCLOverridden(getClass())) {
                security.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);
            }
        }

        g.addUnstarted();

        this.group = g;
        this.daemon = parent.isDaemon();
        this.priority = parent.getPriority();
        if (security == null || isCCLOverridden(parent.getClass()))
            this.contextClassLoader = parent.getContextClassLoader();
        else
            this.contextClassLoader = parent.contextClassLoader;
        this.inheritedAccessControlContext =
                acc != null ? acc : AccessController.getContext();
        this.target = target;
        setPriority(priority);
        if (inheritThreadLocals && parent.inheritableThreadLocals != null)
            this.inheritableThreadLocals =
                ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);
        /* Stash the specified stack size in case the VM cares */
        this.stackSize = stackSize;

        /* Set thread ID */
        tid = nextThreadID();
    }
    1.一个线程的创建肯定是由另一个线程完成的。
    2.被创建线程的父线程是创建它的线程
    3.main函数所在的线程是由jvm创建的，也就是main线程，那就意味着我们前面创建的所有线程，其父线程都是main线程。
Thread与ThreadGroup
    阅读Thread init方法的源码片段：
        SecurityManager security = System.getSecurityManager();
        if (g == null) {
            /* Determine if it's an applet or not */

            /* If there is a security manager, ask the security manager
               what to do. */
            if (security != null) {
                g = security.getThreadGroup();
            }

            /* If the security doesn't have a strong opinion of the matter
               use the parent thread group. */
            if (g == null) {
                g = parent.getThreadGroup();
            }
        }
    通过对源码进行分析，我们可以看出，如果在构造Thread的时候没有显示地指定一个ThreadGroup，那么子线程将会被加入父线程所在的线程组。
    在默认设置中，当然除了子线程和父线程同属于一个Group之外，它还会和父线程拥有同样的优先级。
Thread与Runnable
    Thread负责线程本身相关的职责和控制，而Runnable则负责逻辑执行单元的部分。
Thread与JVM虚拟机栈
    Thread与Stacksize
    打开jdk官方文档，将会发现Thread中对stacksize构造函数的文字说明，具体如下：
        The stack size is the approximate number of bytes of address space that the virtual
    machine is to allocate for this thread's stack. The effect of the stackSize parameter,
    if any,is highly platform dependent.
       On some platforms, specifying a higher value for the stackSize parameter may allow a
    thread to achieve greater recursion depth before throwing a StackOverflowError. Similarly,
    specifying a lower value may allow a greater number of threads to exist concurrently
    without throwing an OutOfMemoryError (or other internal error).  The details of the
    relationship between the value of the stackSize parameter and the maximum recursion depth
    and concurrency level are platform-dependent.On some platforms, the value of the stackSize
    parameter may have no effect whatsoever.
        一般情况下，创建线程的时候不会手动指定栈内存地址空间字节数组，统一通过xss参数进行设置即可，通过上面这
    段官方文档的描述，我们不难发现stacksize越大则代表着正在线程内方法调用递归的深度就余额深，stacksize越小则
    代表着创建的线程数量越多，当然了这个参数对平台的依赖性比较高，比如不同操作系统、不同的硬件。
        在有些平台下，越高的stack设定，可以允许的递归深度越多；反之，越少的stack设定，则递归深度越浅。当然在
    某些平台下，该参数压根不会起到任何作用，如果将该参数设置为0，也不会起到任何作用。
JVM内存结构:
    1.程序计数器
        无论任何语言，其实最终都是需要有操作系统通过控制总线向CPU发送机器指令，Java也不例外，程序计数器在jvm中
    所起的作用就是用于存放当前线程接下来将要执行的字节码指令、分支、循环、跳转、异常处理等信息。在任何时候，一个
    处理器只执行其中一个线程中的指令，为了能够在CPU时间片轮转切换上下文之后顺利回到正确的执行位置，每条线程都需
    要具有一个独立的程序计数器，各个线程之间互相不影响，因此jvm将此块内存区域设计成了线程私有的。
    2.Java虚拟机栈
        Java虚拟机栈也是线程私有的，它的生命周期与线程相同，是在jvm运行时所创建的，在线程中，方法在执行的时候都
    会创建一个名为栈帧(stack frame)的数据结构，主要用于存放局部变量表、操作栈、动态链接、方法出口等信息。
        每一个线程在创建的时候，JVM都会为其创建对应的虚拟机栈，虚拟机栈的大小可以通过-xss来设置，方法的调用是栈
    帧被压入和弹出的过程。同等的虚拟机栈如果局部变量表等占用内存越小则可被压入的栈帧就会越多，反之则可被压入的
    栈帧就会越少，一般将栈帧内存的大小称为宽度，而栈帧数量则称为虚拟机栈的深度。
    3.本地方法栈
        Java中提供了调用本地方法的接口(Java Native Interface),也就是C/C++程序，在线程的执行过程中，经常会碰
    到调用JNI方法的情况，比如网络通信、文件操作的底层，甚至是String的intern等都是JNI方法，JVM为本地方法所划分
    的内存区域便是本地方法栈，这块内存区域其自由度非常高，完全靠不同的JVM厂商来实现，Java虚拟机规范并未给出强制
    的规定，同样它也是线程私有的内存区域。
    4.堆内存
        堆内存是JVM中最大的一块内存区域，被所有的线程所共享，Java在运行期间创建的所有对象几乎都存放在该内存区域，
    该内存区域也是垃圾回收器重点照顾的区域，因此有些时候堆内存被称为"GC堆"。
        堆内存一般会被细分为新生代和老年代，更细致的划分为Eden区、From Survivor区和To Survivor区
    5.方法区
        方法区也是被多个线程所共享的内存区域，它主要用于存储已经被虚拟机加载的类信息、常量、静态变量、即时编译器
   （JIT）编译后的代码等数据，虽然在Java虚拟机规范中，将堆内存划分为堆内存的一个逻辑分区，但是它还是经常被称为
    “非堆”，有时候也被称为“持久代”，主要是站在垃圾回收器的角度进行划分，但是这种叫法比较欠妥，在HotSpot JVM中，
    方法区还会被细划分为持久代和代码缓存区，代码缓存区主要用于存储编译后的本地代码（和硬件相关）以及JIT（Just
    In Time）编译器生成的代码，当然不同的JVM会有不同的实现。
    6.Java 8 元空间
        在JDK1.8版本以前的内存大概都是这样划分的，但是自JDK1.8版本起，JVM的内存区域发生了一些改变，实际上是持久代
    内存被彻底删除，取而代之的是元空间。
        通过对比会发现在JDK1.7版本中存在持久代内存区域，而在JDK1.8版本中，该内存区域被Meta Space取而代之了，元空
    间同样是堆内存的一部分，JVM为每个类加载器分配一块内存块列表，进行线性分配，块的大小取决于类加载器的类型，sun/反
    射/代理对应的类加载器块会小一些，之前的版本会单独卸载回收某个类，而现在则是GC过程中发现某个类加载器已经具备回收的
    条件，则会将整个类加载器相关的元空间全部回收，这样就可以减少内存碎片，节省GC扫描和压缩的时间。
Thread与虚拟机栈：
    线程的创建数量是随着虚拟机栈内存的增多而减少的，也就是一种反比关系。虚拟机栈内存是线程私有的，也就是说每一个线程
    都会占有指定的内存大小。
守护线程：
    什么是守护线程？
        守护线程是一类比较特殊的线程，一般用于处理一些后台的工作。
        JVM程序在什么情况下会退出？
            The Java Virtual Machine exits when the only threads running are all daemon threads.
            上面这句话来自于JDK的官方文档，当然这句话指的是正常退出的情况，而不是调用了System.exit()方法，通过这句话的描述，
        在正常情况下，若JVM中没有一个非收货线程，则JVM的进程会退出。
        注意：
            设置守护线程的方法很简单，调用setDaemon方法即可，true代表守护线程，false代表正常线程。
            线程是否为守护线程和它的父线程有很大的关系，如果父线程是正常线程，则子线程也是正常线程，反之亦然，如果你想要
         修改它的特性则可以借助setDaemon方法。isDaemon方法可以判断该线程是不是守护线程。
            另外需要注意的是，setDaemon方法只在线程启动之前才能生效，如果一个线程已经死亡，那么在设置setDaemon则会抛出
         IllegalThreadStateException异常。
    守护线程的作用：
        当你希望关闭某些线程的时候，或者退出JVM进程的时候，一些线程能够自动关闭，此时就可以考虑用守护线程为你完成这样的工作。