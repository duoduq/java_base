线程的生命周期：
   new:
        new状态通过start方法进入runnable状态
   runnable
        runnable的线程只能意外终止或者进入running状态
   running
        在该状态中，线程的状态可以发生如下的状态转换。
        1.直接进入Terminated状态，比如调用jdk已经不推荐使用的stop方法或者判断某个逻辑标识。
        2.进入blocked状态，比如调用了sleep，或者wait方法而加入了waitSet中。
        3.进行某个阻塞的IO操作，比如因网络数据的读写而进入了blocked状态
        4.获取某个锁资源，从而加入到该锁的阻塞队列中而进入了blocked状态
        5.由于CPU的调度器轮询使该线程放弃执行，进入runnable状态
        6.线程主动调用yield方法，放弃CPU执行权，进入runnable状态
   blocked
        线程在blocked状态中可以切换至如下几个状态
        1.直接进入Terminated状态，比如调用jdk已经不推荐使用的stop方法或者意外死亡(jvm Crash)
        2.线程阻塞的操作结束，比如读取了想要的数据字节进入到Runnable状态
        3.线程完成了指定时间的休眠，进入到了runnable状态
        4.wait中的线程被其他线程notify/notifyall唤醒，进入runnable状态
        5.线程获取到了某个锁资源，进入runnable状态
        6.线程在阻塞过程中被打断，比如其他线程调用了interrupt方法，进入runnable状态
   terminated：线程的最终状态，在该状态中线程将不会切换到其他任何状态。
        线程进入terminated状态有如下几种情况
        1.线程运行正常结束，结束生命周期
        2.线程运行出错意外结束
        3.jvm Crash，导致所有的线程都结束
线程的start方法剖析：
        Thread start方法的源码
        public synchronized void start() {
                /**
                 * This method is not invoked for the main method thread or "system"
                 * group threads created/set up by the VM. Any new functionality added
                 * to this method in the future may have to also be added to the VM.
                 *
                 * A zero status value corresponds to state "NEW".
                 */
                if (threadStatus != 0)
                    throw new IllegalThreadStateException();

                /* Notify the group that this thread is about to be started
                 * so that it can be added to the group's list of threads
                 * and the group's unstarted count can be decremented. */
                group.add(this);

                boolean started = false;
                try {
                    start0();
                    started = true;
                } finally {
                    try {
                        if (!started) {
                            group.threadStartFailed(this);
                        }
                    } catch (Throwable ignore) {
                        /* do nothing. If start0 threw a Throwable then
                          it will be passed up the call stack */
                    }
                }
            }
            start方法的源码足够简单，其实最核心的部分是start0这个本地方法，也就是JNI方法：
            private native void start0();
            也就是说在start方法中会调用start0方法，那么重写的那个run方法何时被调用了呢？
            单从上面是看不出来任何端倪的，但是打开jdk的官方文档，在start方法中有如下的注释说明：
            Cause this thread to begin execution;the Java Virtual Machine calls the
            <code>run<code> method of this thread.
            ===>上面这句话的意思是：在开始执行这个线程时，jvm将会调用该线程的run方法，换言之，
            run方法是被JNI方法start0()调用的，仔细阅读start的源码将会总结出如下几个知识要点。
                1.Thread被构造后的new状态，事实上threadStatus这个内部属性为0.
                2.不能两次启动Thread，否则就会出现IllegalThreadStateException异常。
                3.线程启动后就会被加入到一个ThreadGroup中
                4.一个线程的生命周期结束，也就是到了terminated状态，再次调用start方法是不允许的。
